import { z } from 'zod';
import { verifyProgramSchema } from '../schema/index.js';
import {
  checkScarbInstalled,
  createTempProjectDir,
  initProject,
  writeSourceFiles,
  setupToml,
  cleanProject,
  formatCompilationError
} from '../utils/index.js';
import { exec } from 'child_process';
import { promisify } from 'util';
import * as path from 'path';

const execPromise = promisify(exec);

/**
 * Verify a Cairo program proof
 * @param params The parameters for verification
 * @returns JSON string with verification result
 */
export const verifyProgram = async (
  params: z.infer<typeof verifyProgramSchema>
): Promise<string> => {
  let projectDir = '';
  
  try {
    await checkScarbInstalled();
    
    // Create temporary project directory
    projectDir = await createTempProjectDir(params.projectName);
    const actualProjectDir = path.join(projectDir, params.projectName);
    
    // Initialize the project
    await initProject(projectDir, params.projectName);
    
    // Write source files
    await writeSourceFiles(actualProjectDir, params.sourceFiles);
    
    // Setup TOML configuration
    await setupToml(actualProjectDir, [], params.dependencies);
    
    // For verification, we would typically verify an existing proof
    // This is a placeholder implementation since actual verification
    // requires proof files that would be generated by the prove step
    const command = 'scarb verify';
    
    try {
      const { stdout, stderr } = await execPromise(command, { cwd: actualProjectDir });
      
      return JSON.stringify({
        status: 'success',
        message: `Program verification completed`,
        output: stdout,
        errors: stderr,
        projectName: params.projectName
      });
    } catch (execError) {
      // If scarb verify doesn't exist or proof files are missing, return helpful message
      return JSON.stringify({
        status: 'info',
        message: 'Verification requires proof files generated by the prove step',
        instructions: [
          'First run the prove command to generate proof files',
          'Verification typically requires .proof and .public_input files',
          'Ensure Stone prover is properly configured'
        ],
        projectName: params.projectName
      });
    }
    
  } catch (error) {
    const errors = formatCompilationError(error);
    return JSON.stringify({
      status: 'failure',
      errors: errors,
      metadata: {
        error_type: 'verification_error',
        needs_exact_forwarding: true,
      },
      projectName: params.projectName,
    });
  } finally {
    if (projectDir) {
      await cleanProject(projectDir);
    }
  }
};